--------------7.  Write a code for Analog Filter Design Using MATLAB
n = 5;
f = 2e9;
[zb,pb,kb] = butter(n,2*pi*f,'s');
[bb,ab] = zp2tf(zb,pb,kb);
[hb,wb] = freqs(bb,ab,4096);
[z1,p1,k1] = cheby1(n,3,2*pi*f,'s');
[b1,a1] = zp2tf(z1,p1,k1);
[h1,w1] = freqs(b1,a1,4096);
[z2,p2,k2] = cheby2(n,30,2*pi*f,'s');
[b2,a2] = zp2tf(z2,p2,k2);
[h2,w2] = freqs(b2,a2,4096);
[ze,pe,ke] = ellip(n,3,30,2*pi*f,'s');
[be,ae] = zp2tf(ze,pe,ke);
[he,we] = freqs(be,ae,4096);
plot(wb/(2e9*pi),mag2db(abs(hb)))
hold on
plot(w1/(2e9*pi),mag2db(abs(h1)))
plot(w2/(2e9*pi),mag2db(abs(h2)))
plot(we/(2e9*pi),mag2db(abs(he)))
axis([0 4 -40 5])
grid
xlabel('Frequency (GHz)')
ylabel('Attenuation (dB)')
legend('butter','cheby1','cheby2','ellip')

--------------- 8(a). Write a MATLAB code IIR Butterworth Filter Design Using Bilinear Transformation
clear all;
close all;
clc;

delta1 = input('Enter the Pass Band Ripple');
delta2 = input('Enter the Stop Band Ripple');
wp = input('Enter the Digital Pass Band Edge Frequency');
ws = input('Enter the Digital Stop Band Edge Frequency');
T = input('Enter the Sampling Time Period in Seconds');

%Analog Frequencies Calculated using Bilinear Transformation
omegap = (2/T)*tan(wp/2);
omegas = (2/T)*tan(ws/2);

%To Calculate the filter order
den = 2*log10(omegas/omegap);
delta = ((1/(delta2^2))-1);
epsi = ((1/(delta1^2))-1);
num = log10(delta/epsi);
N = ceil(num/den);

%To Calculate the Analog Cut off frequency
disp('If LPF enter 1, If HPF enter 2, If BPF enter 3, If BSF enter 4');
type = input('enter the type of the filter you want to design');
switch type
case 1
omegac = omegap/(epsi^(1/(2*N)));
wc = 2*atan(omegac/2);
[b,a] = butter(N,wc/pi);
case 2
omegac = omegap/(epsi^(1/(2*N)));
wc = 2*atan(omegac/2);
[b,a] = butter(N,wc/pi,'high');
case 3
omegac1 = omegap/(epsi^(1/(2*N)));
omegac2 = omegas/(delta^(1/(2*N)));
wc1 = 2*atan(omegac1/2);
wc2 = 2*atan(omegac2/2);
wc = [wc1,wc2]
[b,a] = butter(N,wc/pi);
case 4
omegac1 = omegap/(epsi^(1/(2*N)));
omegac2 = omegas/(delta^(1/(2*N)));
wc1 = 2*atan(omegac1/2);
wc2 = 2*atan(omegac2/2);
wc = [wc1,wc2]
[b,a] = butter(N,wc/pi,'stop');
otherwise
disp('The Type Entered is not a valid filter');
end
[H,W] = freqz(b,a,128);
plot(W/pi,20*log10(abs(H)));
grid on
xlabel('Frequency x Pi in radians per sample')
ylabel('Magnitude in dB')
title('Butterworth Filter Design using Bilinear Method')



@@@@@@FOR BPF : 0.9
0.1
0.32
0.85
1S

FOR BSF : 0.9
0.1
0.34
0.9
1S

FOR LPF : 0.7
0.1
0.1
0.8
1S

FOR LPF : 0.6
0.1
0.1
0.7
1S


--------------------------8(b). To design a low pass filter and find the filter order and cutoff frequency.
 clc;
 clear all;
 Wp=40/500;
 Ws=150/500;
 [n,wn]=buttord(Wp,Ws,3,60)
 [z,p,k] = butter(n,wn);
 sos = zp2sos(z,p,k);
 freqz(sos,512,1000)
 title(sprintf('n = %d Butterworth Lowpass Filter',n))
 legend('Srishti Sharma-102015174');

-------------------------- 9. Write a MATLAB code for Designing a digital low pass filter with given specifications.
@@@@@@@@@@@ LPF
clc
clear all
close all
clc;
clear;
close all;
%% Pass band and Stop Band edges
wp = 0.2;
ws = 0.5;
%% Pass band and Stop Band attenuation
Ap = 2;
As = 15;
%% Get Cutoff and Order
[N wc] = buttord(wp,ws,Ap,As);
disp(['Order:' num2str(N)]);
disp(['Cutoff: ' num2str(wc)]);
%% Value of Cutoff in Analog equivalent
WW = tan(wc.*pi/2);
disp(['Cutoff in Analog: ' num2str(WW)]);
%% Get Filter Coefficients
[b a] = butter(N,wc)
%% Get Pole�Zero Plot
figure;
zplane(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)
%% Get Frequency Response
figure;
freqz(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)

@@@@@@@@ HPF
clc;
clear;
close all;
%% Pass band and Stop Band edges
wp = 0.5;
ws = 0.2;
%% Pass band and Stop Band attenuation
Ap = 2;
As = 15;
%% Get Cutoff and Order
[N wc] = buttord(wp,ws,Ap,As);
disp(['Order:' num2str(N)]);
disp(['Cutoff: ' num2str(wc)]);
%% Value of Cutoff in Analog equivalent
WW = tan(wc.*pi/2);
disp(['Cutoff in Analog: ' num2str(WW)]);
%% Get Filter Coefficients
[b a] = butter(N,wc,'high')
%% Get Pole�Zero Plot
14
figure;
zplane(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)
%% Get Frequency Response
figure;
freqz(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)

@@@@@@@ BANDPASS 
clc;clear;close all;
%% Pass band and Stop Band edges
wp = [0.4 0.6];
ws = [0.1 0.9];
%% Pass band and Stop Band attenuation
Ap = 3;
As = 18;
%% Get Cutoff and Order
[N wc] = buttord(wp,ws,Ap,As);
disp(['Order:' num2str(N)]);
disp(['Cutoff: ' num2str(wc)]);
%% Value of Cutoff in Analog equivalent
WW = tan(wc.*pi/2);
disp(['Cutoff in Analog: ' num2str(WW)]);
%% Get Filter Coefficients
[b a] = butter(N,wc,'bandpass')
%% Get Pole�Zero Plot
figure;
zplane(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)
%% Get Frequency Response
figure;
freqz(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)

@@@@@@ BANDSTOP
clc;clear;close all;
%% Pass band and Stop Band edges
ws = [0.4 0.6];
wp = [0.1 0.9];
%% Pass band and Stop Band attenuation
Ap = 3;
As = 18;
%% Get Cutoff and Order
[N wc] = buttord(wp,ws,Ap,As);
disp(['Order:' num2str(N)]);
disp(['Cutoff: ' num2str(wc)]);
%% Value of Cutoff in Analog equivalent
WW = tan(wc.*pi/2);
disp(['Cutoff in Analog: ' num2str(WW)]);
%% Get Filter Coefficients
[b a] = butter(N,wc,'stop')
%% Get Pole�Zero Plot
figure;
zplane(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)
%% Get Frequency Response
figure;
freqz(b,a);
set(findall(gcf,'Type','line'),'LineWidth',2,'MarkerSize',40)

--------------------- 10(a). Write a MATLAB code for Upsampling in Time & Frequency Domain

clc
clear all
close all
N=32;
n=0:31;
w=2*pi/N;
x=sin(w*n);
stem(n,x);
title('DISCRETE SINE SIGNAL') xlabel('time');
legend('Srishti Sharma 102015174'); 

k1=0:31;
g=fft(x,32);
stem(k1,abs(g));
title('FFT');
legend('Srishti Sharma 102015174');

k=2;
Y=[];
j=k-1;
for i=1:length(x) Y=[Y x(i)]; if(i~=length(x)) for m=1:j Y=[Y 0];
end
end
end
stem(Y);
title('ZEROS ADDED'); 
legend('Srishti Sharma 102015174');

rs=fft(Y,length(Y)); 
k=0:length(Y)-1; 
stem(k,abs(rs)); 
title('UPSAMPLED')

subplot(2,1,1); g=fft(x,32); stem(k1,abs(g)); subplot(2,1,2);
rs(28)=0; rs(29)=0; rs(30)=0; rs(31)=0; rs(32)=0; rs(33)=0; rs(34)=0; rs(35)=0;
r1=ifft(rs); stem(real(r1));

------------------------ 10(b). Downsampling

clc; clear all; close all;
%%
syms a b c d e f;
x=[1 2 a b 3 4 c d 5 6 e f 7 8 ];M1=2; M2=3;
i=1;
j=1;
%%
for index=1:M1:length(x)     
y1(i)=x(index); i=i+1;
end
%%
for index=1:M2:length(x) y2(j)=x(index);
j=j+1;
end
%%
x 
y1
y2


@@@@@@@@
%Using the sampling period T_s=1/6, pick samples from sinc^2 (t) 
% and perform downsamling using M1=2,M2=3,M3=4,M4=5, M5=6 
% and inspect the aliasing problem
%%
clc;
clear all;
close all;
t=-10:1/100:10;
w=linspace(-10*pi,10*pi,length(t));
Mvec=[1 2 3 4 5 6];
%%
for i=1:length(Mvec)
yn=zeros(1);
Ts=Mvec(i)*(1/6);
ts=-10:Ts:10;
n=ts./Ts;
yn=(sinc(ts)).^2;
figure(1)
subplot(3,2,i)
stem(ts,yn)
legend("Srishti Sharma-102015174")
xlabel('ts (sec)')
ylabel('Sinc^2(M*ts)')
title([' Downsampling factor M= ' num2str(Mvec(i)) ' for Sinc^2(t)']); %%
xsw=zeros(1,length(w));
for k=1:length(w)
xsw(k)=sum(yn.*exp(-j.*w(k).*n));
end
%%
%%
figure(2)
subplot(3,2,i)
plot(w,abs(xsw))
legend("Srishti Sharma-102015174") 
xlabel('\omega (radyan)') 
ylabel('F[Sinc^2(M*ts)]')
% %%
end

-------------------- 11. Write a MATLAB code for Upsampling and Image artificats
f = [0 0.250 0.500 0.7500 1];
a = [1.0000 0.5000 0 0 0];
nf = 512;
b = fir2(nf-1,f,a);
Hx = fftshift(freqz(b,1,nf,'whole'));
omega = -pi:2*pi/nf:pi-2*pi/nf;
plot(omega/pi,abs(Hx))
grid
xlabel('\times\pi rad/sample')
ylabel('Magnitude')


y = upsample(b,2);
Hy = fftshift(freqz(y,1,nf,'whole'));
hold on
plot(omega/pi,abs(Hy))
hold off
legend('Original','Upsampled')
text(0.65*[-1 1],0.45*[1 1],["\leftarrowImaging" "Imaging
\rightarrow"],...'HorizontalAlignment','center')
